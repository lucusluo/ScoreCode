# -*- coding: utf-8 -*-
"""
Created on Tue Feb 19 15:40:37 2019

@author: lucusluo
"""

import pandas as pd
      
class Chi2(object):
    
    def __init__(self,path,xname,yname='客户标签',y=['好客户','坏客户'],max_interval=5):
        self.data = pd.read_excel(path)
        self.input = pd.DataFrame(pd.read_excel(path), columns = [xname,yname])
        self.xname = xname
        self.yname = yname
        self.y = y
        self.max_interval = max_interval
        
    #计算卡方统计量
    def chi2(self):
        all_cnt = self.data[self.yname].count()
        all_0_cnt = self.data[self.data[self.yname] == self.y[0]].shape[0]
        all_1_cnt = self.data[self.data[self.yname] == self.y[1]].shape[0]
        expect_0_ratio = all_0_cnt * 1.0 / all_cnt
        expect_1_ratio = all_1_cnt * 1.0 / all_cnt
        # 对变量的每个值计算实际个数、期望个数以及卡方统计量
        var_values = sorted(list(set(self.input[self.xname].dropna(axis = 0, how = 'any'))))
        actual_0_cnt = []; actual_1_cnt = []; actual_all_cnt = []; 
        expect_0_cnt = []; expect_1_cnt = []; chi2_value = []
        
        for value in var_values:
            actual_0 = self.input[(self.input[self.xname]==value)&(self.input[self.yname]==self.y[0])].shape[0]
            actual_1 = self.input[(self.input[self.xname]==value)&(self.input[self.yname]==self.y[1])].shape[0]
            actual_all = actual_0 + actual_1
            expect_0 = actual_all * expect_0_ratio
            expect_1 = actual_all * expect_1_ratio
            chi2_0 = (expect_0 - actual_0)**2 / expect_0
            chi2_1 = (expect_1 - actual_1)**2 / expect_1
            actual_0_cnt.append(actual_0)
            actual_1_cnt.append(actual_1)
            actual_all_cnt.append(actual_all)
            expect_0_cnt.append(expect_0)
            expect_1_cnt.append(expect_1)
            chi2_value.append(chi2_0 + chi2_1)
            
        chi2_result = pd.DataFrame({'actual_0':actual_0_cnt, 'actual_1':actual_1_cnt, 'expect_0':expect_0_cnt, \
                                'expect_1':expect_1_cnt, 'chi2_value':chi2_value, self.xname+'_start':var_values, \
                                self.xname+'_end':var_values}, \
                                columns=[self.xname+'_start', self.xname+'_end', 'actual_0', 'actual_1', 'expect_0', \
                                         'expect_1', 'chi2_value'])
        
        print('卡方分箱基础数据处理已完成，将进行分箱-------')   
        
        groups = chi2_result.shape[0]
        while groups > self.max_interval:
            min_idx = chi2_result[chi2_result['chi2_value']==chi2_result['chi2_value'].min()].index.tolist()[0]
            if min_idx == 0:
                chi2_result = self.merge(chi2_result, self.xname, min_idx, min_idx+1)
            elif min_idx == groups-1:    
                chi2_result = self.merge(chi2_result, self.xname, min_idx, min_idx-1)
            else:
                if chi2_result.loc[min_idx-1, 'chi2_value'] > chi2_result.loc[min_idx+1, 'chi2_value']:
                    chi2_result = self.merge(chi2_result, self.xname, min_idx, min_idx+1)
                else:
                    chi2_result = self.merge(chi2_result, self.xname, min_idx, min_idx-1)
            groups = chi2_result.shape[0]
           
        return chi2_result
       
    #定义合并区间的方法
    def merge(self,chi2_result, var_name, idx, merge_idx):
        #按照idx和merge_idx执行合并
        chi2_result.ix[idx, 'actual_0'] = chi2_result.ix[idx, 'actual_0'] + chi2_result.ix[merge_idx, 'actual_0']
        chi2_result.ix[idx, 'actual_1'] = chi2_result.ix[idx, 'actual_1'] + chi2_result.ix[merge_idx, 'actual_1']
        chi2_result.ix[idx, 'expect_0'] = chi2_result.ix[idx, 'expect_0'] + chi2_result.ix[merge_idx, 'expect_0']    
        chi2_result.ix[idx, 'expect_1'] = chi2_result.ix[idx, 'expect_1'] + chi2_result.ix[merge_idx, 'expect_1']   
        chi2_0 = (chi2_result.ix[idx, 'expect_0'] - chi2_result.ix[idx, 'actual_0'])**2 / chi2_result.ix[idx, 'expect_0']
        chi2_1 = (chi2_result.ix[idx, 'expect_1'] - chi2_result.ix[idx, 'actual_1'])**2 / chi2_result.ix[idx, 'expect_1']
        chi2_result.ix[idx, 'chi2_value'] = chi2_0 + chi2_1
        #调整每个区间的起始值
        if idx < merge_idx:
            chi2_result.ix[idx, var_name+'_end'] = chi2_result.ix[merge_idx, var_name+'_end']
        else:
            chi2_result.ix[idx, var_name+'_start'] = chi2_result.ix[merge_idx, var_name+'_start']
        chi2_result = chi2_result.drop([merge_idx])
        chi2_result = chi2_result.reset_index(drop=True)
        
        return chi2_result
    
    if __name__ == '__main__':
        print('chi2()')

a = Chi2(path='F:/工作/小微产品20180921/20181009/原始数据2018.xlsx',xname='年龄',yname='客户类型_3个月表现期')
b = a.chi2()

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
